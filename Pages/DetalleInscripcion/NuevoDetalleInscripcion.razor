@inject IDetalleInscripcionService detalleInscripcionService
@inject IMateriaService materiaService
@inject IAnioCarreraService anioCarreraService
@inject IGenericService<Inscripcion> inscripcionService
@inject SweetAlertService SweetAlert
@inject NavigationManager NavigationManager
@inject ILogger<NuevoDetalleInscripcion> logger

@if (inscripcion == null|| materias==null || aniosCarrera==null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div style="background-color: @(isEditing ? "lightyellow": "white")">
    <EditForm Model="detalleInscripcion" OnValidSubmit="Guardar" >
        <DataAnnotationsValidator />
        <div class="container">
            <div class="row">
                <div class="col-md-3">
                    <label class="form-label ">Materia:</label>
                    <InputSelect class="form-control mb-2" @bind-Value="detalleInscripcion.MateriaId">
                        @foreach (var materia in materias)
                        {
                            <option value="@materia.Id">@materia.Nombre</option>
                        }
                    </InputSelect>
                </div>
                <div class="col-md-3">
                    <label class="form-label">Año:</label>
                    <select class="form-control mb-2" value="@idAnioCarrera" @onchange="ActualizarMaterias">
                        @foreach (var anioCarrera in aniosCarrera)
                        {
                            <option value="@anioCarrera.Id">@anioCarrera.Nombre</option>
                        }
                    </select>
                </div>

                <div class="col-md-2">
                    <label class="form-label ">Modalidad:</label>
                    <InputSelect class="form-control mb-2" @bind-Value="detalleInscripcion.ModalidadCursado">
                        @foreach (var option in Enum.GetValues(typeof(ModalidadCursadoEnum)))
                        {
                            <option value="@option">@option</option>
                        }
                    </InputSelect>
                </div>
                <ValidationSummary />
                <div class="col-md-1">
                    <button class="btn btn-primary " type="submit">@guardarButtonText</button>
                </div>
                    @if (isEditing)
                    {
                        <div class="col-md-1">
                            <button class="btn btn-primary " @onclick="Cancelar">Cancelar</button>
                        </div>
                    }
            </div>
        </div>
    </EditForm>
    </div>
}
@code {
    [Parameter]
    [EditorRequired]
    public int idInscripcion { get; set; }

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    [Parameter]
    public EventCallback OnCancelar { get; set; }

    [Parameter]
    public DetalleInscripcion? detalleInscripcionEdit { get; set; }

    public DetalleInscripcion? detalleInscripcion { get; set; }

    private bool isEditing => detalleInscripcionEdit != null;
    private string guardarButtonText => isEditing ? "Actualizar" : "Agregar";

    private List<Materia>? materias { get; set; }
    private List<AnioCarrera>? aniosCarrera { get; set; }
    private Inscripcion? inscripcion { get; set; }
    private int? idAnioCarrera { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        detalleInscripcion = detalleInscripcionEdit ?? new DetalleInscripcion();
        detalleInscripcion.InscripcionId = idInscripcion;
        idAnioCarrera = isEditing ? detalleInscripcion?.Materia?.AnioCarreraId : aniosCarrera?.First().Id;
        materias = await materiaService.GetByAnioCarreraAsync(idAnioCarrera);
        if (!isEditing)
            detalleInscripcion.MateriaId = materias.First().Id;
        StateHasChanged();
        logger.LogInformation($"el idAnioCarrera es igual {idAnioCarrera}");
    }
    protected override async Task OnInitializedAsync()
    {
        inscripcion = await inscripcionService.GetByIdAsync(idInscripcion);
        aniosCarrera = await anioCarreraService.GetByCarreraAsync(inscripcion?.CarreraId);
    }

    private async Task ActualizarMaterias(ChangeEventArgs e)
    {
        idAnioCarrera = int.Parse(e.Value.ToString());
        materias= await materiaService.GetByAnioCarreraAsync(idAnioCarrera);
        detalleInscripcion.MateriaId = materias.First().Id;
    }

    private async Task Guardar()
    {
        logger.LogInformation(detalleInscripcion.ToString());
        if (isEditing)
            await detalleInscripcionService.UpdateAsync(detalleInscripcion);
        else
            await detalleInscripcionService.AddAsync(detalleInscripcion);
        await OnGuardar.InvokeAsync();
    }

    private async Task Cancelar()
    {
        await OnCancelar.InvokeAsync();
    }
}

