@using BlazorAppVSCode.Components.NuevoDetalleInscripcion
@inject IDetalleInscripcionService detalleInscripcionService
@inject IMateriaService materiaService
@inject IAnioCarreraService anioCarreraService
@inject IGenericService<Inscripcion> inscripcionService
@inject SweetAlertService SweetAlert
@inject NavigationManager NavigationManager
@inject ILogger<NuevoDetalleInscripcion> logger

@if (inscripcion == null|| materias==null || aniosCarrera==null)
{
    <p><em>Cargando...</em></p>
}
else
{
    <div style="background-color: @(isEditing ? "lightyellow": "white")">
    <EditForm Model="detalleInscripcion" OnValidSubmit="Guardar" >
        <DataAnnotationsValidator />
        <div class="container">
            <div class="row">
                <InputSelectAniosCarrera idAnioCarrera="idAnioCarrera" aniosCarrera="aniosCarrera" parentUpdateMaterias="ActualizarMaterias" />
                <InputSelectMaterias detalleInscripcion="detalleInscripcion" materias="materias" />
                <InputSelectModalidadEnum detalleInscripcion="detalleInscripcion" />
                <ValidationSummary />
                <ButtonsGuardarCancelar isEditing="isEditing"  parentCancelar="Cancelar" />
            </div>
        </div>
    </EditForm>
    </div>
}
@code {
    [Parameter]
    [EditorRequired]
    public int idInscripcion { get; set; }

    [Parameter]
    public EventCallback OnGuardar { get; set; }

    [Parameter]
    public EventCallback OnCancelar { get; set; }

    [Parameter]
    public DetalleInscripcion? detalleInscripcionEdit { get; set; }

    public DetalleInscripcion? detalleInscripcion { get; set; }

    private bool isEditing => detalleInscripcionEdit != null;

    private List<Materia>? materias { get; set; }
    private List<AnioCarrera>? aniosCarrera { get; set; }
    private Inscripcion? inscripcion { get; set; }
    private int? idAnioCarrera { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        detalleInscripcion = detalleInscripcionEdit ?? new DetalleInscripcion();
        detalleInscripcion.InscripcionId = idInscripcion;
        idAnioCarrera = isEditing ? detalleInscripcion?.Materia?.AnioCarreraId : aniosCarrera?.First().Id;
        materias = await materiaService.GetByAnioCarreraAsync(idAnioCarrera);
        if (!isEditing)
            detalleInscripcion.MateriaId = materias.First().Id;
        StateHasChanged();
        logger.LogInformation($"el idAnioCarrera es igual {idAnioCarrera}");
    }
    protected override async Task OnInitializedAsync()
    {
        inscripcion = await inscripcionService.GetByIdAsync(idInscripcion);
        aniosCarrera = await anioCarreraService.GetByCarreraAsync(inscripcion?.CarreraId);
    }

    private async Task ActualizarMaterias(ChangeEventArgs e)
    {
        idAnioCarrera = int.Parse(e.Value.ToString());
        materias= await materiaService.GetByAnioCarreraAsync(idAnioCarrera);
        detalleInscripcion.MateriaId = materias.First().Id;
    }

    private async Task Guardar()
    {
        try
        {
            logger.LogInformation(detalleInscripcion.ToString());
            if (isEditing)
                await detalleInscripcionService.UpdateAsync(detalleInscripcion);
            else
            {
                if (await detalleInscripcionService.CheckDuplicadoDetalleInscripcionAsync(detalleInscripcion.InscripcionId, detalleInscripcion.MateriaId))
                {
                    await SweetAlert.FireAsync(new SweetAlertOptions
                        {
                            Title = "Materia duplicada",
                            Text = $"La materia ya existe en la inscripción",
                            Icon = SweetAlertIcon.Info,
                            ShowCancelButton = false,
                            ConfirmButtonText = "Aceptar",
                        });
                    return;
                }
                else
                    await detalleInscripcionService.AddAsync(detalleInscripcion);
            }

            await OnGuardar.InvokeAsync();
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Error: {ex.Message}");
        }
        
    }

    private async Task Cancelar()
    {
        await OnCancelar.InvokeAsync();
    }
}

